export interface ImageGenerationOptions {
  productName: string;
  style?: 'futuristic' | 'realistic' | 'artistic' | 'minimal';
  mood?: 'dark' | 'bright' | 'neon' | 'elegant';
  dimensions?: {
    width: number;
    height: number;
  };
}

export interface GeneratedImage {
  base64: string;
  dataUrl: string;
  prompt: string;
  timestamp: number;
}

export class AIImageGenerator {
  private apiKey: string;
  private baseUrl = 'https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  private generatePrompt(options: ImageGenerationOptions): string {
    const { productName, style = 'futuristic', mood = 'dark' } = options;
    
    const stylePrompts = {
      futuristic: 'hyper-realistic, futuristic, sci-fi, high-tech, cyberpunk',
      realistic: 'photorealistic, professional product photography, studio lighting',
      artistic: 'artistic, creative, abstract, digital art, concept art',
      minimal: 'minimalist, clean, simple, modern, elegant'
    };

    const moodPrompts = {
      dark: 'dark background, moody lighting, dramatic shadows, neon accents',
      bright: 'bright lighting, clean background, vibrant colors',
      neon: 'neon colors, glowing effects, electric atmosphere, cyberpunk lighting',
      elegant: 'elegant atmosphere, luxury feel, sophisticated lighting, premium quality'
    };

    return `A ${stylePrompts[style]} photograph of a "${productName}" on a ${moodPrompts[mood]}. Cinematic lighting, 8K resolution, highly detailed, professional quality, sharp focus.`;
  }

  async generateImage(options: ImageGenerationOptions): Promise<GeneratedImage> {
    const prompt = this.generatePrompt(options);
    const { width = 1024, height = 1024 } = options.dimensions || {};

    console.log(`[AI-IMAGE-GEN] Generating image with prompt: ${prompt}`);

    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          text_prompts: [
            {
              text: prompt,
            },
          ],
          cfg_scale: 7,
          height,
          width,
          samples: 1,
          steps: 30,
          style_preset: 'enhance', // This can help improve quality
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Stability AI API error (${response.status}): ${errorText}`);
      }

      const responseJSON = await response.json();
      
      if (!responseJSON.artifacts || responseJSON.artifacts.length === 0) {
        throw new Error('No images generated by Stability AI');
      }

      const image = responseJSON.artifacts[0];
      const dataUrl = `data:image/png;base64,${image.base64}`;

      console.log('[AI-IMAGE-GEN] Image generated successfully');

      return {
        base64: image.base64,
        dataUrl,
        prompt,
        timestamp: Date.now()
      };

    } catch (error) {
      console.error('[AI-IMAGE-GEN] Error generating image:', error);
      throw error;
    }
  }

  async generateMultipleImages(options: ImageGenerationOptions, count: number = 3): Promise<GeneratedImage[]> {
    const promises = Array.from({ length: count }, () => this.generateImage(options));
    const results = await Promise.allSettled(promises);
    
    return results
      .filter((result): result is PromiseFulfilledResult<GeneratedImage> => result.status === 'fulfilled')
      .map(result => result.value);
  }
}
